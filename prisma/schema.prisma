// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Size {
  XS
  S
  M
  L
  XL
  XXL
  XXXL
}

enum Gender {
  men
  women
  kid
  unisex
}

enum Role {
  user
  admin
}

model Category {
  id      String    @id @default(uuid())
  name    String    @unique
  Product Product[]
}

model Product {
  id          String   @id @default(uuid())
  title       String
  description String
  inStock     Int
  price       Float    @default(0)
  sizes       Size[]   @default([])
  slug        String   @unique
  tags        String[] @default([])
  gender      Gender

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId String

  ProductImage ProductImage[]
  OrderItem    OrderItem[]
  CartProduct  CartProduct[]

  @@index([gender])
}

model ProductImage {
  id  Int    @id @default(autoincrement())
  url String

  product   Product @relation(fields: [productId], references: [id])
  productId String
}

model User {
  id            String       @id @default(uuid())
  name          String
  email         String       @unique
  emailVerified DateTime?
  password      String
  role          Role         @default(user)
  image         String?
  address       UserAddress?
  Order         Order[]
  Cart          Cart[]
}

model Country {
  id           String         @id @unique
  name         String
  UserAddress  UserAddress[]
  OrderAddress OrderAddress[]
}

model UserAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String?
  city      String
  zip       String
  phone     String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Order {
  id           String    @id @default(uuid())
  subTotal     Float
  tax          Float
  total        Float
  itemsInOrder Int
  isPaid       Boolean   @default(false)
  paidAt       DateTime?

  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  transactionId String?

  user   User   @relation(fields: [UserId], references: [id])
  UserId String

  OrderItem    OrderItem[]
  OrderAddress OrderAddress?
}

model OrderItem {
  id       String @id @default(uuid())
  quantity Int
  price    Float
  size     Size

  order   Order  @relation(fields: [OrderId], references: [id])
  OrderId String

  product   Product @relation(fields: [ProductId], references: [id])
  ProductId String
}

model OrderAddress {
  id        String  @id @default(uuid())
  firstName String
  lastName  String
  address   String
  address2  String?
  city      String
  zip       String
  phone     String

  country   Country @relation(fields: [countryId], references: [id])
  countryId String

  Order   Order  @relation(fields: [orderId], references: [id])
  orderId String @unique
}

model Cart {
  id       String   @id @default(uuid())
  userId   String   @unique
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  User        User          @relation(fields: [userId], references: [id])
  CartProducts CartProduct[]
}

model CartProduct {
  id       Int      @id @default(autoincrement())
  quantity Int
  price    Float
  size     Size
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt

  productId String
  cartId    String

  Product Product @relation(fields: [productId], references: [id])
  Cart    Cart    @relation(fields: [cartId], references: [id])

  @@unique([cartId, productId, size])
}
